# CMake 最低版本要求
cmake_minimum_required(VERSION 3.21)

# 项目名称和语言
project(Eurora LANGUAGES CXX)

# 设置 C++ 标准
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# 添加自定义的 CMake 模块路径
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

# versioning and install paths
set(EURORA_VERSION_MAJOR 0)
set(EURORA_VERSION_MINOR 0)
set(EURORA_VERSION_PATCH 0)
set(EURORA_VERSION_STRING ${EURORA_VERSION_MAJOR}.${EURORA_VERSION_MINOR}.${EURORA_VERSION_PATCH})
set(EURORA_SOVERSION ${EURORA_VERSION_MAJOR}.${EURORA_VERSION_MINOR})

find_package(Git)
if(GIT_FOUND)
    execute_process(COMMAND ${GIT_EXECUTABLE} rev-parse HEAD WORKING_DIRECTORY
            ${CMAKE_SOURCE_DIR} OUTPUT_VARIABLE EURORA_GIT_SHA1 ERROR_VARIABLE EURORA_GIT_STDERR)
    string(STRIP "${EURORA_GIT_SHA1}" EURORA_GIT_SHA1)
    string(LENGTH "${EURORA_GIT_SHA1}" EURORA_GIT_SHA1_LEN)
    if (${EURORA_GIT_SHA1_LEN} LESS 40)
        message(WARNING "Could not determine SHA-1 hash: ${EURORA_GIT_STDERR}")
        set(EURORA_GIT_SHA1 "NA")
    endif()
else()
    set(EURORA_GIT_SHA1 "NA")
endif()

set(EURORA_INSTALL_CONFIG_PATH share/eurora/config)
set(EURORA_INSTALL_PYTHON_MODULE_PATH share/eurora/python)
set(EURORA_INSTALL_SCHEMA_PATH share/eurora/schema)
set(EURORA_INSTALL_INCLUDE_PATH include/eurora)
set(EURORA_INSTALL_CHROOT_SCRIPTS_PATH share/eurora/chroot)

# create the Eurora version header
configure_file("${CMAKE_SOURCE_DIR}/cmake/eurora_sha1.h.in" ${PROJECT_BINARY_DIR}/include/eurora_sha1.h @ONLY)
include_directories(${PROJECT_BINARY_DIR}/include)
install(FILES ${PROJECT_BINARY_DIR}/include/eurora_sha1.h DESTINATION ${EURORA_INSTALL_INCLUDE_PATH} COMPONENT main)

# set the build type to Release if not specified
if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING
            "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."
            FORCE)
endif()

set(CMAKE_INSTALL_RPATH ".:${CMAKE_INSTALL_PREFIX}/lib")
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
# whether to install dependencies
option(EURORA_INSTALL_DEPENDENCIES "Install eurora dependencies" Off)

if (WIN32)
    include("${CMAKE_SOURCE_DIR}/cmake/WindowsSettings.cmake")
else ()
    include("${CMAKE_SOURCE_DIR}/cmake/UnixSettings.cmake")
endif ()

option(BUILD_TESTING "Enable test building" On)
if (BUILD_TESTING)
    enable_testing()
    find_package(GTest REQUIRED)
    message("GTEST FOUND: ${GTEST_FOUND}")
    add_subdirectory(tests)
else()
    message("Testing not being built")
endif()

option(BUILD_WITH_GPERFTOOLS_PROFILER "Build with the gperftools profiler." Off)
if (BUILD_WITH_GPERFTOOLS_PROFILER)
    message("Adding gpertools to build.")
    find_package(Gperftools REQUIRED)
endif()

option(BUILD_DOCUMENTATION "Build Eurora documentation." Off)
if(BUILD_DOCUMENTATION)
    add_subdirectory(doc)
endif()

add_subdirectory(src)
add_subdirectory(tools)


# 创建包版本文件
include(CMakePackageConfigHelpers)
write_basic_package_version_file(
    "${CMAKE_CURRENT_BINARY_DIR}/MyLibraryConfigVersion.cmake"
    VERSION 1.0.0
    COMPATIBILITY AnyNewerVersion
)

# 配置包配置文件
configure_package_config_file(
    "${CMAKE_CURRENT_SOURCE_DIR}/cmake/include/EuroraLibraryConfig.cmake.in"
    "${CMAKE_CURRENT_BINARY_DIR}/EuroraLibraryConfig.cmake"
    INSTALL_DESTINATION lib/cmake/EuroraLibrary
)

# 安装配置文件
install(FILES
    "${CMAKE_CURRENT_BINARY_DIR}/MyLibraryConfig.cmake"
    "${CMAKE_CURRENT_BINARY_DIR}/MyLibraryConfigVersion.cmake"
    DESTINATION lib/cmake/MyLibrary
)
